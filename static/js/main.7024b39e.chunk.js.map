{"version":3,"sources":["components/Header/Header.js","components/SearchBar/SearchBar.js","utils/API.js","components/Table/Table.js","components/TableData/TableData.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","SearchBar","props","type","placeholder","aria-label","onChange","handleInputChange","axois","get","Table","scope","onClick","handleSort","this","rowGenerate","TableData","data-th","src","img","alt","firstName","lastName","phone","href","target","email","age","Main","state","search","users","order","filteredUsers","event","map","result","key","login","uuid","name","first","last","picture","large","dob","setState","console","log","sortedUsers","sort","a","b","undefined","localeCompare","value","filter","filteredList","item","Object","values","join","toLowerCase","indexOf","API","then","results","data","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7024b39e.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header App-header\">\r\n                <h1>Employee Directory</h1>       \r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\n\r\n\r\nexport default function SearchBar(props) {\r\n    return (\r\n        <div className=\"searchbox\">\r\n            <form className=\"form-inline\">\r\n                <div className=\"row \">\r\n                 \r\n                    <div className=\"col-6\">\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"search\"\r\n                            placeholder=\"Enter Name Here\"\r\n                            aria-label=\"Search\"\r\n                            onChange={props.handleInputChange}\r\n                        />\r\n                    </div>  \r\n                    \r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import axois from \"axios\";\r\n\r\nexport default {\r\n    //gets all the users data\r\n    getUsers: function() {\r\n        return axois.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n}","import React, { Component } from \"react\"\r\n// import TableData from \"../TableData/TableData\";\r\n// import rowGenerate from \"../TableData/TableData\"\r\n\r\nexport default class Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <ul className=\"list-group\">\r\n        <table className=\"table table-striped\">\r\n          <thead className=\"tableHead\">\r\n            <tr>\r\n              <th scope=\"col\">Picture</th>\r\n              <th scope=\"col\" onClick={() => { this.props.handleSort(\"name\") }}>Name (click to sort)</th>\r\n              <th scope=\"col\">Phone</th>\r\n              <th scope=\"col\">Email</th>\r\n              <th scope=\"col\">Age</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {this.props.rowGenerate()}\r\n          </tbody>\r\n        </table>\r\n      </ul>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\"\r\n\r\n\r\nexport default class TableData extends Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td data-th=\"Image\" className=\"align-middle\">\r\n                    <img\r\n                        src={this.props.img}\r\n                        alt={\"profile image for \" + this.props.firstName + \" \" + this.props.lastName}\r\n                        className=\"img-responsive\"\r\n                    />\r\n                </td>\r\n                <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                    {this.props.firstName} {this.props.lastName}\r\n                </td>\r\n                <td data-th=\"Phone\" className=\"align-middle\">\r\n                    {this.props.phone}\r\n                </td>\r\n                <td data-th=\"Email\" className=\"align-middle\">\r\n                    <a href={\"mailto:\"} target=\"__blank\">\r\n                        {this.props.email}\r\n                    </a>\r\n                </td>\r\n                <td data-th=\"DOB\" className=\"align-middle\">\r\n                    {this.props.age}\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport API from \"../../utils/API\";\r\nimport Table from \"../Table/Table\"\r\nimport TableData from \"../TableData/TableData\"\r\n\r\nexport default class Main extends Component {\r\n    state = {\r\n        search: \"\",\r\n        users: [],\r\n        order: \"decend\",\r\n        filteredUsers: []\r\n    }\r\n    // Input data into for employees in each row\r\n    rowGenerate = event => {\r\n        return this.state.filteredUsers.map((result) => (\r\n            < TableData\r\n                key={result.login.uuid}\r\n                firstName={result.name.first}\r\n                lastName={result.name.last}\r\n                img={result.picture.large}\r\n                email={result.email}\r\n                phone={result.phone}\r\n                age={result.dob.age}\r\n            />\r\n        ));\r\n    }\r\n// Wait for API \r\n    componentDidMount() {\r\n        API.getUsers().then(results => {\r\n            console.log(\"results\", results);\r\n            this.setState({\r\n                users: results.data.results,\r\n                filteredUsers: results.data.results\r\n            })\r\n        })\r\n    }\r\n    //Sort First Name alphabetically\r\n    handleSort = (event) => {\r\n        //check and update state\r\n        if (this.state.order === \"descend\") {\r\n            this.setState({\r\n                order: \"ascend\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                order: \"descend\"\r\n            });\r\n        }\r\n        console.log(this.state.order)\r\n        const compareFnc = (a, b) => {\r\n            if (this.state.order === \"ascend\") {\r\n                // account for missing values\r\n                if (a[event] === undefined) {\r\n                    return 1;\r\n                } else if (b[event] === undefined) {\r\n                    return -1;\r\n                }\r\n                // numerically\r\n                else if (event === \"name\") {\r\n                    return a[event].first.localeCompare(b[event].first);\r\n                }\r\n                else if (event === \"email\") {\r\n                    return a[event].email.localeCompare(b[event].first);\r\n                }\r\n                else {\r\n                    return a[event] - b[event];\r\n                }\r\n\r\n\r\n            } else {\r\n                // account for missing values\r\n                if (a[event] === undefined) {\r\n                    return 1;\r\n                } else if (b[event] === undefined) {\r\n                    return -1;\r\n                }\r\n                // numerically\r\n                else if (event === \"name\") {\r\n                    return b[event].first.localeCompare(a[event].first);\r\n                }\r\n                else if (event === \"email\") {\r\n                    return b[event].email.localeCompare(a[event].first);\r\n                } else {\r\n                    return b[event] - a[event];\r\n                }\r\n            }\r\n\r\n        }\r\n        const sortedUsers = this.state.filteredUsers.sort(compareFnc);\r\n        this.setState({ filteredUsers: sortedUsers });\r\n\r\n    }\r\n\r\n    //Sets state when change occurs\r\n    handleInputChange = event => {\r\n        console.log(event.target.value);\r\n        const filter = event.target.value;\r\n        const filteredList = this.state.users.filter(item => {\r\n            // merge data together then see if user input is anywhere inside\r\n            let values = Object.values(item).join(\"\").toLowerCase();\r\n            return values.indexOf(filter.toLowerCase()) !== -1;\r\n        });\r\n        this.setState({ filteredUsers: filteredList });\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SearchBar search={this.state.search} handleSort={this.handleSort} handleInputChange={this.handleInputChange} />\r\n                <div className=\"data-area\">\r\n                    < Table handleSort={this.handleSort} rowGenerate={this.rowGenerate} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}